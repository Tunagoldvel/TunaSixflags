public void waitForCondition(String TypeOfWait, String WebElement, int Time){
		try {
			Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(Time, TimeUnit.SECONDS).pollingEvery(5, TimeUnit.SECONDS).ignoring(Exception.class);
			switch (TypeOfWait)
			{
			case "PageLoad":
				wait.until( ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
				break;
			case "Clickable":
				wait.until(ExpectedConditions.elementToBeClickable(FindAnElement(WebElement)));
				break;
			case "Presence":
				wait.until(ExpectedConditions.presenceOfElementLocated(getElementWithLocator(WebElement)));
				break;
			case "Visibility":
				wait.until(ExpectedConditions.visibilityOfElementLocated(getElementWithLocator(WebElement)));
				break;
			case "NotPresent":
				wait.until(ExpectedConditions.invisibilityOfElementLocated(getElementWithLocator(WebElement)));
				break;
			default:
				Thread.sleep(Time*1000);
			}
		}
		catch(Exception e)
		{
			throw new IllegalArgumentException("wait For Condition \"" + TypeOfWait + "\" isn't supported.");
		}




	public void PerformActionOnElement(String WebElement, String Action, String Text) throws Exception {
		switch (Action) {
		case "Click":
			FindAnElement(WebElement).click();
			break;
		case "Type":
			FindAnElement(WebElement).sendKeys(Text);
			break;
		case "Clear":
			FindAnElement(WebElement).clear();
			break;
		case "WaitForElementDisplay":
			waitForCondition("Presence",WebElement,60);
			break;
		case "WaitForElementClickable":
			waitForCondition("Clickable",WebElement,60);
			break;
		case "ElementNotDisplayed":
			waitForCondition("NotPresent",WebElement,60);
			break;
		default:
			throw new IllegalArgumentException("Action \"" + Action + "\" isn't supported.");
		}
	}


	public By getElementWithLocator(String WebElement) throws Exception {
    		String locatorTypeAndValue = prop.getProperty(WebElement);
    		String[] locatorTypeAndValueArray = locatorTypeAndValue.split(",");
    		String locatorType = locatorTypeAndValueArray[0].trim();
    		String locatorValue = locatorTypeAndValueArray[1].trim();
    		switch (locatorType.toUpperCase()) {
    		case "ID":
    			return By.id(locatorValue);
    		case "NAME":
    			return By.name(locatorValue);
    		case "TAGNAME":
    			return By.tagName(locatorValue);
    		case "LINKTEXT":
    			return By.linkText(locatorValue);
    		case "PARTIALLINKTEXT":
    			return By.partialLinkText(locatorValue);
    		case "XPATH":
    			return By.xpath(locatorValue);
    		case "CSS":
    			return By.cssSelector(locatorValue);
    		case "CLASSNAME":
    			return By.className(locatorValue);
    		default:
    			return null;
    		}
    	}

    	public WebElement FindAnElement(String WebElement) throws Exception{
    		return driver.findElement(getElementWithLocator(WebElement));
    	}